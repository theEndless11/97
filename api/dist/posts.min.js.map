{"version":3,"sources":["posts.js"],"names":["_mongoose","_interopRequireDefault","require","_db","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","default","dislikes","likedBy","dislikedBy","comments","comment","model","handler","req","res","posts","regeneratorRuntime","async","_context","prev","next","method","awrap","connectToDatabase","Post","find","sort","sent","json","t0","console","status","error","stop"],"mappings":"4FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,IAAAD,QAAA,uFAGA,IAAME,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,OAPfK,MAAA,CAAAC,KAAAC,OAAAC,QAAA,GASIC,SAAU,CAAEH,KAAMC,OAAQC,QAAS,GACnCE,QAAS,CAACV,QACVW,WAAY,CAACX,QAXgCY,SAAA,CAAA,CAAAT,SAAAH,OAAAa,QAAAb,OAAAC,UAAAC,SAK7CD,KAAWC,UAAAA,QAFwBY,MAAA,OAAAlB,YAK5B,SAAAmB,QAAAC,EAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAyB,QAATP,EAAAQ,OAAhB,OAAAH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,OACG,EAAA9B,IAAA+B,sBADHL,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAM,MAL4BE,KAAAC,OAAAC,KAAA,CAAA5B,WAAA,KAK5B,KAAA,EAL4BiB,EAK5BG,EAAAS,KAEG9B,EAAAA,OAPyB,KAAA+B,KAAAb,GAK5BG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,MAAA,GAGGY,QAAGjC,MARsB,0BAQzBqB,EAAAW,IAAaf,EAAAiB,OAAA,KAAAH,KAAA,CAAAhC,QAAA,yBAAAoC,MAAAd,EAAAW,KAHhB,KAAA,GAAAX,EAAAE,KAAA,GAAA,MAAA,KAAA,GAIyCtB,EAAAA,OAAWC,KAAAA,KAAAA,CAAAA,QAAAA,uBAJpD,KAAA,GAAA,IAAA,MAAA,OAAAmB,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"posts.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Serverless API handler for getting posts\r\nexport default async function handler(req, res) {\r\n    // Handle GET requests to fetch posts\r\n    if (req.method === 'GET') {\r\n        try {\r\n            await connectToDatabase(); // Connect to MongoDB\r\n\r\n            // Fetch posts from the database, sorted by the timestamp in descending order\r\n            const posts = await Post.find().sort({ timestamp: -1 });\r\n            res.status(200).json(posts); // Send posts as a JSON response\r\n        } catch (error) {\r\n            console.error(\"Error retrieving posts:\", error);\r\n            res.status(500).json({ message: 'Error retrieving posts', error }); // Handle any errors\r\n        }\r\n    } else {\r\n        // If the request is not a GET request, respond with 405 Method Not Allowed\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"]}