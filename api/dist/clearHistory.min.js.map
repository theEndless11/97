{"version":3,"sources":["clearHistory.js"],"names":["_mongoose","_interopRequireDefault","require","_db","sessionExpirationTime","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","handler","req","res","currentTime","expiredPosts","result","regeneratorRuntime","async","_context","prev","next","awrap","method","now","Post","find","$lte","sent","length","deleteMany","_id","$in","map","post","console","log","concat","deletedCount","status","json","t0","error","stop"],"mappings":"4FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,IAAAD,QAAA,uFAEA,IAAME,sBAAwB,KAGxBC,WAAa,IAAIC,UAAAA,QAASC,OAAO,CANvCC,QAAAC,OAQIC,UAAWC,KAPfC,SAAAH,OASII,UAAWJ,SAPTL,KAAAA,UAAAA,QAAAA,MAAwB,OAAAC,YAaf,SAAeS,QAAQC,EAAKC,GAA5B,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,OAVTpB,EAAAA,IAAAA,sBAUS,KAAA,EAAA,GAVwB,WAEnCK,EAASgB,OAQE,OAAAJ,EAAAC,KAAA,EAMGN,EAAcN,KAAKgB,MANtBL,EAAAE,KAAA,EAAAJ,mBAAAK,MAFaG,KAAfC,KAAuBxB,CAYpBK,UAAW,CAAEoB,KAAM,IAAInB,KAAKM,EAAcb,2BAV3CkB,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAA,GAAA,GAFFlB,EAEEgB,EAAAS,MAAAC,OAAA,OAAAV,EAAAE,KAAA,GAAAJ,mBAAAK,MAAAG,KAAAK,WAAA,CAAAC,IAAA,CAAAC,IAAAjB,EAAAkB,IAAA,SAAAC,GAAA,OAAAA,EAAAH,UAAAZ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAL,EAAAG,EAAAS,KAmBCO,QAAQC,IAAR,GAAAC,OAAerB,EAAOsB,aAAtB,4BAnBDzB,EAAA0B,OAAA,KAAAC,KAAA,CAAAnC,QAAA,kDAAAc,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAR,EAAA0B,OAAA,KAAAC,KAAA,CAAAnC,QAAA,4BAAA,KAAA,GAAAc,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,MAAA,GAyBHgB,QAAQO,MAAM,0BAAdvB,EAAAsB,IAzBG5B,EAAA0B,OAAA,KAAAC,KAAA,CAAAnC,QAAA,yBAAAqC,MAAAvB,EAAAsB,KAAA,KAAA,GAAAtB,EAAAE,KAAA,GAAA,MAAA,KAAA,GA6BPR,EAAI0B,OAAO,KAAKC,KAAK,CAAEnC,QAAS,uBA7BzB,KAAA,GAAA,IAAA,MAAA,OAAAc,EAAAwB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"clearHistory.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\nconst sessionExpirationTime = 60 * 60 * 1000; // 1 hour in milliseconds\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,  // Session ID that the post is associated with\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            // Get the current time\r\n            const currentTime = Date.now();\r\n\r\n            // Find all posts with expired sessions\r\n            const expiredPosts = await Post.find({\r\n                timestamp: { $lte: new Date(currentTime - sessionExpirationTime) }\r\n            });\r\n\r\n            if (expiredPosts.length > 0) {\r\n                // Delete expired posts\r\n                const result = await Post.deleteMany({\r\n                    _id: { $in: expiredPosts.map(post => post._id) }\r\n                });\r\n\r\n                console.log(`${result.deletedCount} expired posts deleted.`);\r\n                res.status(200).json({ message: 'Expired posts have been deleted successfully.' });\r\n            } else {\r\n                res.status(200).json({ message: 'No expired posts found.' });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error clearing history:', error);\r\n            res.status(500).json({ message: 'Error clearing history', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}