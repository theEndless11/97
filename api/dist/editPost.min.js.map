{"version":3,"sources":["editPost.js"],"names":["_mongoose","_interopRequireDefault","require","_db","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","default","dislikes","likedBy","dislikedBy","comments","comment","model","handler","req","res","body","postId","action","connectToDatabase","method","Post","findById","post","status","json","includes","push","trim","save","console","_context","t0","error"],"mappings":"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","file":"editPost.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    const { postId, username, action, comment } = req.body;\r\n\r\n    await connectToDatabase(); // Ensure you're connected to the DB\r\n\r\n    if (req.method === 'POST') {\r\n        try {\r\n            // Find the post by postId\r\n            const post = await Post.findById(postId);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Handle the \"like\" action\r\n            if (action === 'like') {\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot like a post you have disliked' });\r\n                }\r\n\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already liked this post' });\r\n                }\r\n\r\n                post.likes += 1;\r\n                post.likedBy.push(username); // Add the user to the likedBy array\r\n\r\n            // Handle the \"dislike\" action\r\n            } else if (action === 'dislike') {\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot dislike a post you have liked' });\r\n                }\r\n\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already disliked this post' });\r\n                }\r\n\r\n                post.dislikes += 1;\r\n                post.dislikedBy.push(username); // Add the user to the dislikedBy array\r\n\r\n           \r\n            // Handle the \"comment\" action\r\n            } else if (action === 'comment') {\r\n                if (!comment || !comment.trim()) {\r\n                    return res.status(400).json({ message: 'Comment cannot be empty' });\r\n                }\r\n\r\n                post.comments.push({ username, comment, timestamp: new Date() });\r\n\r\n            } else {\r\n                return res.status(400).json({ message: 'Invalid action type' });\r\n            }\r\n\r\n            // Save the updated post\r\n            await post.save();\r\n            res.json(post);\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error updating post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"]}