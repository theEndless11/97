{"version":3,"sources":["posts.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","handler","req","res","method","find","sort","posts","status","json","console","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAAiD;AAEjD;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ,MAJwB;AAKnCK,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GAL4B;AAMnCC,EAAAA,QAAQ,EAAE;AAAEF,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GANyB;AAOnCE,EAAAA,OAAO,EAAE,CAACT,MAAD,CAP0B;AAOf;AACpBU,EAAAA,UAAU,EAAE,CAACV,MAAD,CARuB;AAQZ;AACvBW,EAAAA,QAAQ,EAAE,CAAC;AAAER,IAAAA,QAAQ,EAAEH,MAAZ;AAAoBY,IAAAA,OAAO,EAAEZ,MAA7B;AAAqCC,IAAAA,SAAS,EAAEC;AAAhD,GAAD;AATyB,CAApB,CAAnB,C,CAYA;;AACA,IAAMW,IAAI,GAAGhB,qBAASiB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAb,C,CAEA;;;AACe,SAAemB,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEPD,GAAG,CAACE,MAAJ,KAAe,KAFR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAIG,4BAJH;;AAAA;AAAA;AAAA,0CAOiBL,IAAI,CAACM,IAAL,GAAYC,IAAZ,CAAiB;AAAEnB,YAAAA,SAAS,EAAE,CAAC;AAAd,WAAjB,CAPjB;;AAAA;AAOGoB,UAAAA,KAPH;AAQHJ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB,EARG,CAQ0B;;AAR1B;AAAA;;AAAA;AAAA;AAAA;AAUHG,UAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAExB,YAAAA,OAAO,EAAE,wBAAX;AAAqC0B,YAAAA,KAAK;AAA1C,WAArB,EAXG,CAWiE;;AAXjE;AAAA;AAAA;;AAAA;AAcP;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAExB,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAfO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Serverless API handler for getting posts\r\nexport default async function handler(req, res) {\r\n    // Handle GET requests to fetch posts\r\n    if (req.method === 'GET') {\r\n        try {\r\n            await connectToDatabase(); // Connect to MongoDB\r\n\r\n            // Fetch posts from the database, sorted by the timestamp in descending order\r\n            const posts = await Post.find().sort({ timestamp: -1 });\r\n            res.status(200).json(posts); // Send posts as a JSON response\r\n        } catch (error) {\r\n            console.error(\"Error retrieving posts:\", error);\r\n            res.status(500).json({ message: 'Error retrieving posts', error }); // Handle any errors\r\n        }\r\n    } else {\r\n        // If the request is not a GET request, respond with 405 Method Not Allowed\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"],"file":"posts.dev.js"}