{"version":3,"sources":["deletePost.js"],"names":["_mongoose","_interopRequireDefault","require","_db","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","_req$body","postId","post","regeneratorRuntime","async","_context","prev","next","awrap","connectToDatabase","req","body","abrupt","res","status","json","findById","sent","deleteOne","t0","console","error","stop"],"mappings":"4FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,IAAAD,QAAA,uFAGA,IAAME,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,SAITK,KAAOR,UAAAA,QAASS,MAAM,OAAQV,YARpB,SAAOC,QAAAA,EAASC,GAAhB,IAAAS,EAAAC,EAAAL,EAAAC,EAAAK,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,OACL,EAAApB,IAAAqB,sBADK,KAAA,EAAA,GAAuB,WAGnCb,EAAUH,OAHE,CAAAY,EAAAE,KAAA,GAAA,MAAA,GAAAF,EAAAC,KAAA,EAAAN,EAOhBU,EAAAC,KAAAV,EAPgBD,EAOhBC,OAAAL,EAPgBI,EAOhBJ,SAAAC,EAPgBG,EAOhBH,UAYiBI,GAAWL,GAAaC,EAnBzB,CAAAQ,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAO,OAAA,SAoBOC,EAAIC,OAAO,KAAKC,KAAK,CAAEvB,QAAS,0DApBvC,KAAA,EAAA,OAAAa,EAAAE,KAAA,EAAAJ,mBAAAK,MAWDV,KAAAkB,SAAAf,IAXC,KAAA,EAAA,GAWDC,EAXCG,EAAAY,KAAA,CAAAZ,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAO,OAAA,SAWDC,EAAAC,OAAA,KAAAC,KAAA,CAAAvB,QAAA,oBAXC,KAAA,GAAA,GA8BAU,EAAKN,WAAaA,EA9BlB,OAAAS,EAAAO,OAAA,SAWDC,EAAAC,OAAA,KAAAC,KAAA,CAAAvB,QAAA,wCAXCa,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAK,MAWDN,EAAAgB,aAXC,KAAA,GAoCJL,EAAIC,OAAO,KAAKC,KAAK,CAAEvB,QAAS,8BApC5Ba,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,GAWDe,QAAAC,MAAAhB,EAAAc,IA4BHN,EAAIC,OAAO,KAAKC,KAAK,CAAEvB,QAAS,sBAAuB6B,MAAKhB,EAAAc,KAvCxD,KAAA,GAAAd,EAAAE,KAAA,GAAA,MAAA,KAAA,GAWDM,EAAAC,OAAA,KAAAC,KAAA,CAAAvB,QAAA,uBAXC,KAAA,GAAA,IAAA,MAAA,OAAAa,EAAAiB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"deletePost.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Serverless API handler for handling different request types\r\nexport default async function handler(req, res) {\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            const { postId, username, sessionId } = req.body;\r\n            \r\n            // Check that the required fields are present\r\n            if (!postId || !username || !sessionId) {\r\n                return res.status(400).json({ message: 'Missing required fields: postId, username, sessionId' });\r\n            }\r\n\r\n            // Find the post to delete\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the post belongs to the user making the request\r\n            if (post.username !== username) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post from the database\r\n            await post.deleteOne();\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error deleting post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}