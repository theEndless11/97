{"version":3,"sources":["clearHistory.js"],"names":["sessionExpirationTime","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","method","currentTime","now","find","$lte","expiredPosts","length","deleteMany","_id","$in","map","post","result","console","log","deletedCount","status","json","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAAiD;AAEjD,IAAMA,qBAAqB,GAAG,KAAK,EAAL,GAAU,IAAxC,C,CAA8C;AAE9C;;AACA,IAAMC,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ,MAJwB,CAIf;;AAJe,CAApB,CAAnB,C,CAOA;;AACA,IAAMK,IAAI,GAAGR,qBAASS,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAb;;AAEe,SAAeW,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACL,4BADK;;AAAA;AAAA,gBAGPD,GAAG,CAACE,MAAJ,KAAe,QAHR;AAAA;AAAA;AAAA;;AAAA;AAKH;AACMC,UAAAA,WANH,GAMiBT,IAAI,CAACU,GAAL,EANjB,EAQH;;AARG;AAAA,0CASwBP,IAAI,CAACQ,IAAL,CAAU;AACjCZ,YAAAA,SAAS,EAAE;AAAEa,cAAAA,IAAI,EAAE,IAAIZ,IAAJ,CAASS,WAAW,GAAGhB,qBAAvB;AAAR;AADsB,WAAV,CATxB;;AAAA;AASGoB,UAAAA,YATH;;AAAA,gBAaCA,YAAY,CAACC,MAAb,GAAsB,CAbvB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAesBX,IAAI,CAACY,UAAL,CAAgB;AACjCC,YAAAA,GAAG,EAAE;AAAEC,cAAAA,GAAG,EAAEJ,YAAY,CAACK,GAAb,CAAiB,UAAAC,IAAI;AAAA,uBAAIA,IAAI,CAACH,GAAT;AAAA,eAArB;AAAP;AAD4B,WAAhB,CAftB;;AAAA;AAeOI,UAAAA,MAfP;AAmBCC,UAAAA,OAAO,CAACC,GAAR,WAAeF,MAAM,CAACG,YAAtB;AACAhB,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE5B,YAAAA,OAAO,EAAE;AAAX,WAArB;AApBD;AAAA;;AAAA;AAsBCU,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE5B,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAtBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBHwB,UAAAA,OAAO,CAACK,KAAR,CAAc,yBAAd;AACAnB,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE5B,YAAAA,OAAO,EAAE,wBAAX;AAAqC6B,YAAAA,KAAK;AAA1C,WAArB;;AA1BG;AAAA;AAAA;;AAAA;AA6BPnB,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAE5B,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA7BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\nconst sessionExpirationTime = 60 * 60 * 1000; // 1 hour in milliseconds\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,  // Session ID that the post is associated with\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            // Get the current time\r\n            const currentTime = Date.now();\r\n\r\n            // Find all posts with expired sessions\r\n            const expiredPosts = await Post.find({\r\n                timestamp: { $lte: new Date(currentTime - sessionExpirationTime) }\r\n            });\r\n\r\n            if (expiredPosts.length > 0) {\r\n                // Delete expired posts\r\n                const result = await Post.deleteMany({\r\n                    _id: { $in: expiredPosts.map(post => post._id) }\r\n                });\r\n\r\n                console.log(`${result.deletedCount} expired posts deleted.`);\r\n                res.status(200).json({ message: 'Expired posts have been deleted successfully.' });\r\n            } else {\r\n                res.status(200).json({ message: 'No expired posts found.' });\r\n            }\r\n        } catch (error) {\r\n            console.error('Error clearing history:', error);\r\n            res.status(500).json({ message: 'Error clearing history', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"clearHistory.dev.js"}