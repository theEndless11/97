{"version":3,"sources":["editPost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","handler","req","res","body","postId","action","method","findById","post","status","json","includes","push","trim","save","console","error"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    const { postId, username, action, comment } = req.body;\r\n\r\n    await connectToDatabase(); // Ensure you're connected to the DB\r\n\r\n    if (req.method === 'POST') {\r\n        try {\r\n            // Find the post by postId\r\n            const post = await Post.findById(postId);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Handle the \"like\" action\r\n            if (action === 'like') {\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot like a post you have disliked' });\r\n                }\r\n\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already liked this post' });\r\n                }\r\n\r\n                post.likes += 1;\r\n                post.likedBy.push(username); // Add the user to the likedBy array\r\n\r\n            // Handle the \"dislike\" action\r\n            } else if (action === 'dislike') {\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot dislike a post you have liked' });\r\n                }\r\n\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already disliked this post' });\r\n                }\r\n\r\n                post.dislikes += 1;\r\n                post.dislikedBy.push(username); // Add the user to the dislikedBy array\r\n\r\n           \r\n            // Handle the \"comment\" action\r\n            } else if (action === 'comment') {\r\n                if (!comment || !comment.trim()) {\r\n                    return res.status(400).json({ message: 'Comment cannot be empty' });\r\n                }\r\n\r\n                post.comments.push({ username, comment, timestamp: new Date() });\r\n\r\n            } else {\r\n                return res.status(400).json({ message: 'Invalid action type' });\r\n            }\r\n\r\n            // Save the updated post\r\n            await post.save();\r\n            res.json(post);\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error updating post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"],"file":"editPost.dev.js"}