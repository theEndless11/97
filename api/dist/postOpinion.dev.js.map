{"version":3,"sources":["postOpinion.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","handler","req","res","method","body","trim","status","json","console","log","newPost","save","error","cleanPost","_id"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAFkD;AAEF;AAEhD;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ,MAJwB;AAKnCK,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GAL4B;AAMnCC,EAAAA,QAAQ,EAAE;AAAEF,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GANyB;AAOnCE,EAAAA,OAAO,EAAE,CAACT,MAAD,CAP0B;AAOf;AACpBU,EAAAA,UAAU,EAAE,CAACV,MAAD,CARuB;AAQZ;AACvBW,EAAAA,QAAQ,EAAE,CAAC;AAAER,IAAAA,QAAQ,EAAEH,MAAZ;AAAoBY,IAAAA,OAAO,EAAEZ,MAA7B;AAAqCC,IAAAA,SAAS,EAAEC;AAAhD,GAAD;AATyB,CAApB,CAAnB;;AAWA,IAAMW,IAAI,GAAGhB,qBAASiB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAb;;AAEe,SAAemB,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACPD,GAAG,CAACE,MAAJ,KAAe,MADR;AAAA;AAAA;AAAA;;AAAA,sBAEkCF,GAAG,CAACG,IAFtC,EAECpB,OAFD,aAECA,OAFD,EAEUI,QAFV,aAEUA,QAFV,EAEoBC,SAFpB,aAEoBA,SAFpB;;AAAA,gBAIH,CAACL,OAAD,IAAYA,OAAO,CAACqB,IAAR,OAAmB,EAJ5B;AAAA;AAAA;AAAA;;AAAA,2CAKIH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEvB,YAAAA,OAAO,EAAE;AAAX,WAArB,CALJ;;AAAA;AAAA,gBAOH,CAACI,QAAD,IAAa,CAACC,SAPX;AAAA;AAAA;AAAA;;AAAA,2CAQIa,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEvB,YAAAA,OAAO,EAAE;AAAX,WAArB,CARJ;;AAAA;AAAA;AAYHwB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAZG;AAAA,0CAaG,4BAbH;;AAAA;AAayB;AAC5BD,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAEMC,UAAAA,OAhBH,GAgBa,IAAIZ,IAAJ,CAAS;AAAEd,YAAAA,OAAO,EAAPA,OAAF;AAAWE,YAAAA,SAAS,EAAE,IAAIC,IAAJ,EAAtB;AAAkCC,YAAAA,QAAQ,EAARA,QAAlC;AAA4CC,YAAAA,SAAS,EAATA;AAA5C,WAAT,CAhBb;AAAA;AAAA,0CAiBGqB,OAAO,CAACC,IAAR,EAjBH;;AAAA;AAmBHH,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,OAA/B,EAnBG,CAqBH;;AArBG;AAAA;AAAA,0CAuBO,yBAAc,YAAd,EAA4BA,OAA5B,CAvBP;;AAAA;AAwBCF,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCC,OAAvC;AAxBD;AAAA;;AAAA;AAAA;AAAA;AA0BCF,UAAAA,OAAO,CAACI,KAAR,CAAc,2BAAd;;AA1BD;AA6BH;AACMC,UAAAA,SA9BH,GA8Be;AACdC,YAAAA,GAAG,EAAEJ,OAAO,CAACI,GADC;AAEd9B,YAAAA,OAAO,EAAE0B,OAAO,CAAC1B,OAFH;AAGdE,YAAAA,SAAS,EAAEwB,OAAO,CAACxB,SAHL;AAIdE,YAAAA,QAAQ,EAAEsB,OAAO,CAACtB,QAJJ;AAKdE,YAAAA,KAAK,EAAEoB,OAAO,CAACpB,KALD;AAMdG,YAAAA,QAAQ,EAAEiB,OAAO,CAACjB,QANJ;AAOdG,YAAAA,QAAQ,EAAEc,OAAO,CAACd;AAPJ,WA9Bf;AAwCHM,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,SAArB,EAxCG,CAwC+B;;AAxC/B;AAAA;;AAAA;AAAA;AAAA;AA0CHL,UAAAA,OAAO,CAACI,KAAR,CAAc,oBAAd;AACAV,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEvB,YAAAA,OAAO,EAAE,mBAAX;AAAgC4B,YAAAA,KAAK;AAArC,WAArB;;AA3CG;AAAA;AAAA;;AAAA;AA8CPV,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEvB,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA9CO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { connectToDatabase } from '../utils/db';  // Corrected path\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../utils/ably';  // Corrected path\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'POST') {\r\n        const { message, username, sessionId } = req.body;\r\n        \r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();  // Ensure this step completes\r\n            console.log('Database connected successfully.');\r\n\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            console.log('New post saved:', newPost);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('newOpinion', newPost);\r\n                console.log('Post published to Ably:', newPost);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const cleanPost = {\r\n                _id: newPost._id,\r\n                message: newPost.message,\r\n                timestamp: newPost.timestamp,\r\n                username: newPost.username,\r\n                likes: newPost.likes,\r\n                dislikes: newPost.dislikes,\r\n                comments: newPost.comments,\r\n            };\r\n\r\n            res.status(201).json(cleanPost);  // Send clean post data without Mongoose metadata\r\n        } catch (error) {\r\n            console.error('Error saving post:', error);\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"postOpinion.dev.js"}