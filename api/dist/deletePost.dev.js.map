{"version":3,"sources":["deletePost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","handler","req","res","method","body","postId","status","json","findById","post","deleteOne","console","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAAiD;AAEjD;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ;AAJwB,CAApB,CAAnB,C,CAOA;;AACA,IAAMK,IAAI,GAAGR,qBAASS,KAAT,CAAe,MAAf,EAAuBV,UAAvB,CAAb,C,CAEA;;;AACe,SAAeW,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACL,4BADK;;AAAA;AAAA,gBAGPD,GAAG,CAACE,MAAJ,KAAe,QAHR;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAKqCF,GAAG,CAACG,IALzC,EAKKC,MALL,aAKKA,MALL,EAKaT,QALb,aAKaA,QALb,EAKuBC,SALvB,aAKuBA,SALvB,EAOH;;AAPG,gBAQC,CAACQ,MAAD,IAAW,CAACT,QAAZ,IAAwB,CAACC,SAR1B;AAAA;AAAA;AAAA;;AAAA,2CASQK,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB,CATR;;AAAA;AAAA;AAAA,0CAagBM,IAAI,CAACU,QAAL,CAAcH,MAAd,CAbhB;;AAAA;AAaGI,UAAAA,IAbH;;AAAA,cAcEA,IAdF;AAAA;AAAA;AAAA;;AAAA,2CAeQP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfR;;AAAA;AAAA,gBAmBCiB,IAAI,CAACb,QAAL,KAAkBA,QAnBnB;AAAA;AAAA;AAAA;;AAAA,2CAoBQM,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB,CApBR;;AAAA;AAAA;AAAA,0CAwBGiB,IAAI,CAACC,SAAL,EAxBH;;AAAA;AAyBHR,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB;AAzBG;AAAA;;AAAA;AAAA;AAAA;AA2BHmB,UAAAA,OAAO,CAACC,KAAR;AACAV,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE,qBAAX;AAAkCoB,YAAAA,KAAK;AAAvC,WAArB;;AA5BG;AAAA;AAAA;;AAAA;AA+BPV,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEf,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA/BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Serverless API handler for handling different request types\r\nexport default async function handler(req, res) {\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            const { postId, username, sessionId } = req.body;\r\n            \r\n            // Check that the required fields are present\r\n            if (!postId || !username || !sessionId) {\r\n                return res.status(400).json({ message: 'Missing required fields: postId, username, sessionId' });\r\n            }\r\n\r\n            // Find the post to delete\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the post belongs to the user making the request\r\n            if (post.username !== username) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post from the database\r\n            await post.deleteOne();\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error deleting post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"deletePost.dev.js"}