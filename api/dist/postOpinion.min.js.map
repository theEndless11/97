{"version":3,"sources":["postOpinion.js"],"names":["_db","require","_mongoose","_interopRequireDefault","_ably","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","default","dislikes","likedBy","dislikedBy","comments","comment","Post","model","_req$body","newPost","cleanPost","regeneratorRuntime","async","_context","prev","next","req","body","trim","abrupt","res","status","json","console","log","awrap","connectToDatabase","save","publishToAbly","t0","_id","t1","error","stop"],"mappings":"4FAAA,IAAAA,IAAAC,QAAA,eACAC,UAAAC,uBAAAF,QAAA,aACAG,MAAAH,QAAA,yFAGA,IAAMI,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OANbC,UAAAC,KAQIC,SAAUH,OAPdI,UAAAJ,OASIK,MAAO,CAAEC,KAAMC,OAAQC,QAAS,GARpCC,SAAA,CAAAH,KAAAC,OAAAC,QAAA,GAUIE,QAAS,CAACV,QACVW,WAAY,CAACX,QACbY,SAAU,CAAC,CAAET,SAAUH,OAAQa,QAASb,OAAQC,UAAWC,SAZfY,KAAAjB,UAAAA,QAAAkB,MAAA,OAAAnB,YAGhC,SAAOC,QAAAA,EAASC,GAAhB,IAAAkB,EAAAjB,EAAAI,EAAAC,EAAAa,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAuB,SACnCxB,EAASC,OADG,CAAAqB,EAAAE,KAAA,GAAA,MAAA,GAAAP,EAAuBQ,EAAAC,KAExBvB,EAFCc,EAEDd,QAFwBC,EAAvBa,EAAuBb,SAAAC,EAAvBY,EAAuBZ,UAIxBJ,GAJwB,KAAAD,EAAA2B,OAAvB,CAAAL,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAM,OAAA,SAKLC,EAAAC,OAAA,KAAAC,KAAA,CAAA/B,QAAA,6BALK,KAAA,EAAA,GAKWI,GAASC,EALpB,CAAAiB,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAM,OAAA,SAAuBC,EAAAC,OAAA,KAAAC,KAAA,CAAA/B,QAAA,yCAAvB,KAAA,EAAA,OAAAsB,EAAAC,KAAA,EAAuBS,QAAAC,IAAA,6BAAvBX,EAAAE,KAAA,GAAAJ,mBAAAc,OAOH,EAAA1C,IAAA2C,sBAPG,KAAA,GAAA,OAOQH,QAAAC,IAAA,oCACGf,EAAA,IAAAH,KAAA,CAAAf,QAAAA,EAAAE,UAAA,IAAAC,KAAAC,SAAAA,EAAAC,UAAAA,IARXiB,EAAAE,KAAA,GAAAJ,mBAAAc,MASDhB,EAAAkB,QATC,KAAA,GAAA,OAS0BJ,QAA3BC,IAAA,kBAAAf,GATCI,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAc,OAoCM,EAAAtC,MAAAyC,eAAc,aAAcnB,IApClC,KAAA,GAWHpB,QAAAA,IAAAA,0BAAuBD,GAXpByB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,IAaDU,QAA4BH,MAA5B,4BAAAP,EAAAgB,IAbC,KAAA,GAaDnB,EAAA,CAAAoB,IAAArB,EAAAqB,IAAAvC,QAAAkB,EAAAlB,QACPyB,UAAAP,EAAehB,UADRE,SAAAc,EAAAd,SAAAE,MAAAY,EAAAZ,MAAAI,SAAAQ,EAAAR,SAqCCG,SAAUK,EAAQL,UArCnBgB,EAIHC,OAAC9B,KAAWA,KAAAA,GAjBRsB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAaDU,QAAAS,MAAA,qBAAAnB,EAAAkB,IAAAX,EAAAC,OAAA,KAAAC,KAAA,CAAA/B,QAAA,oBAAAyC,MAAAnB,EAAAkB,KAbC,KAAA,GAAAlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAkB0BxB,EAAAA,OAAO,KAAE+B,KAAA,CAAA/B,QAAA,uBAlBnC,KAAA,GAAA,IAAA,MAAA,OAAAsB,EAAAoB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA","file":"postOpinion.min.js","sourcesContent":["import { connectToDatabase } from '../utils/db';  // Corrected path\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../utils/ably';  // Corrected path\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === 'POST') {\r\n        const { message, username, sessionId } = req.body;\r\n        \r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();  // Ensure this step completes\r\n            console.log('Database connected successfully.');\r\n\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            console.log('New post saved:', newPost);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('newOpinion', newPost);\r\n                console.log('Post published to Ably:', newPost);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const cleanPost = {\r\n                _id: newPost._id,\r\n                message: newPost.message,\r\n                timestamp: newPost.timestamp,\r\n                username: newPost.username,\r\n                likes: newPost.likes,\r\n                dislikes: newPost.dislikes,\r\n                comments: newPost.comments,\r\n            };\r\n\r\n            res.status(201).json(cleanPost);  // Send clean post data without Mongoose metadata\r\n        } catch (error) {\r\n            console.error('Error saving post:', error);\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}