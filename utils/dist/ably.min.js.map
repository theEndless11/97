{"version":3,"sources":["ably.js"],"names":["_ably","_interopRequireDefault","require","ably","Ably","Realtime","process","env","ABLY_API_KEY","channel","channels","get","publishToAbly","event","data","Promise","resolve","reject","serializedData","_objectSpread","timestamp","Date","toISOString","publish","err","console","error","log","concat","subscribeToAbly","callback","message"],"mappings":"gJAAA,IAAAA,MAAAC,uBAAAC,QAAA,4yBAEA,IAAMC,KAAO,IAAIC,MAAAA,QAAKC,SAASC,QAAQC,IAAIC,cACrCC,QAAUN,KAAKO,SAASC,IAAI,YAO3B,SAASC,cAAcC,EAAOC,GACjC,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAEzB,IAAMC,EAAcC,cAAA,GACbL,EADa,CAEhBM,WAAW,IAAIC,MAAOC,gBAI1Bb,QAAQc,QAAQV,EAAOK,EAAgB,SAACM,GAhBhCrB,GAkBAsB,QAAQC,MAAM,oCAAqCF,GAhBnEP,EAAAO,KAmBgBC,QAAQE,IAAR,iDAAAC,OAA6Df,IAC7DG,SAWT,SAASa,gBAAgBhB,EAAOiB,GAjB/BrB,QAAQc,UAAQV,EAAOK,SAAAA,GACnBO,QAASE,IAAT,mBAAAC,OAASf,GAAAkB,GACLN,EAAQC","file":"ably.min.js","sourcesContent":["import Ably from 'ably';\r\n\r\nconst ably = new Ably.Realtime(process.env.ABLY_API_KEY);  // Fetch Ably API key from environment variables\r\nconst channel = ably.channels.get('opinions');  // Use the same 'opinions' channel for all communication\r\n\r\n/**\r\n * Publish a message to the Ably channel\r\n * @param {string} event - The event name, e.g., 'newOpinion', 'editOpinion', or 'deleteOpinion'\r\n * @param {Object} data - The data to send in the event\r\n */\r\nexport function publishToAbly(event, data) {\r\n    return new Promise((resolve, reject) => {\r\n        // Serialize the data if needed\r\n        const serializedData = {\r\n            ...data,\r\n            timestamp: new Date().toISOString(),  // Add current timestamp\r\n        };\r\n\r\n        // Publish the event with the serialized data\r\n        channel.publish(event, serializedData, (err) => {\r\n            if (err) {\r\n                console.error('Error publishing message to Ably:', err);\r\n                reject(err);\r\n            } else {\r\n                console.log(`Published message to Ably channel with event: ${event}`);\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Subscribe to an event on the Ably channel\r\n * @param {string} event - The event name to subscribe to\r\n * @param {Function} callback - The callback function to handle the event\r\n */\r\nexport function subscribeToAbly(event, callback) {\r\n    channel.subscribe(event, (message) => {\r\n        console.log(`Received event: ${event}`, message);\r\n        callback(message);\r\n    });\r\n}"]}